class LCSFinder ():
    def __init__(self,seq1,seq2): #define as sequências
        self.seq1 = seq1
        self.seq2 = seq2

    def compute_LCS(self): #faz a matriz e o LCS
        matriz = [[0 for i in range(len(self.seq1)+1)] for j in range(len(self.seq2)+1)]

        for i in range(1,len(self.seq1)+1): #linhas
            for j in range(1,len(self.seq2)+1): #colunas
                if self.seq1[i-1] == self.seq2[j-1]:
                    matriz[i][j] = matriz[i-1][j-1] + 1
                else:
                    matriz[i][j] = max(matriz[i-1][j], matriz[i][j-1])

        for linha in matriz: #print da matriz
            print(linha)

class Sequence():
    def __init__(self, ID: str, description: str, seq: str): #define um nome para a sequencia, uma descrição e ela propria
        self.id = id
        self.description = description
        self.seq = seq
        
    def length(self): #diz o tamanho da sequencia dada
        return len(self.seq)

    def char_at(self,position: int): #diz a base nessa posição PRECISO DE ALIGNMENT E NÃO HA ALIGNMENT
        if position < 0 or position >= len(self.seq):
            print("Posição não existe")
        return self.seq[position]

    def __str__(self): #permite dar print à sequência como string
        return self.seq
